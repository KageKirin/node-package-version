name: Test Get

on:
  push:
    branches-ignore:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Get
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: npm install


      # basic simple test: just print current this package's version
      - name: Test functionality
        run: |
          node . get     package.json
          echo "version=$(node . get     package.json)" >> $GITHUB_OUTPUT
        id: test
      - name: Print results
        run: echo ${{ steps.test.outputs.version }}

      # simple test on fixed test data
      - name: Test on simple format
        run: |
          node . get     testdata/simple/package.json
          echo "version=$(node . get     testdata/simple/package.json)" >> $GITHUB_OUTPUT
        id: simple
      - name: Print results
        run: echo ${{ steps.simple.outputs.version }}
      - name: Verify results
        run: |
          if [ "${{ steps.simple.outputs.version }}" == "1.2.3" ]; then
            echo "Version matches"
          else
            echo "Version mismatch"
            exit -1
          fi

      # simple test with custom regex on fixed test data
      - name: Test on simple format with custom regex
        run: |
          node . get --regex '^(?<major>[0-9]+)\.(?<minor>[0-9]+)\.(?<patch>[0-9]+)$'   testdata/simple/package.json
          echo "version=$(node . get --regex '^(?<major>[0-9]+)\.(?<minor>[0-9]+)\.(?<patch>[0-9]+)$'    testdata/simple/package.json)" >> $GITHUB_OUTPUT
        id: custom
      - name: Print results
        run: echo ${{ steps.custom.outputs.version }}
      - name: Verify results
        run: |
          if [ "${{ steps.custom.outputs.version }}" == "1.2.3" ]; then
            echo "Version matches"
          else
            echo "Version mismatch"
            exit -1
          fi

      # prerelease test on fixed test data
      - name: Test on prerelease format
        run: |
          node . get     testdata/prerelease/package.json
          echo "version=$(node . get     testdata/prerelease/package.json)" >> $GITHUB_OUTPUT
        id: prerelease
      - name: Print results
        run: echo ${{ steps.prerelease.outputs.version }}
      - name: Verify results
        run: |
          if [ "${{ steps.prerelease.outputs.version }}" == "1.2.3-beta.5" ]; then
            echo "Version matches"
          else
            echo "Version mismatch"
            exit -1
          fi

      # buildmeta test on fixed test data
      - name: Test on buildmetadata format
        run: |
          node . get     testdata/buildmeta/package.json
          echo "version=$(node . get     testdata/buildmeta/package.json)" >> $GITHUB_OUTPUT
        id: buildmeta
      - name: Print results
        run: echo ${{ steps.buildmeta.outputs.version }}
      - name: Verify results
        run: |
          if [ "${{ steps.buildmeta.outputs.version }}" == "1.2.3+foobar.42" ]; then
            echo "Version matches"
          else
            echo "Version mismatch"
            exit -1
          fi

      # complex test on fixed test data
      - name: Test on complex format
        run: |
          node . get     testdata/complex/package.json
          echo "version=$(node . get     testdata/complex/package.json)" >> $GITHUB_OUTPUT
        id: complex
      - name: Print results
        run: echo ${{ steps.complex.outputs.version }}
      - name: Verify results
        run: |
          if [ "${{ steps.complex.outputs.version }}" == "1.2.3-beta.5+foobar.42" ]; then
            echo "Version matches"
          else
            echo "Version mismatch"
            exit -1
          fi
